import logging
from core.classes import DataBaseCommand, Printing_Information_in_Message
from app.keyboards import star_keyboard, bank_opinion 
from aiogram import Bot
from aiogram.types import Message, CallbackQuery

# @dp.callback_query(F.data.in_({'USD', 'EUR'}))
async def main_message( message: Message, bot: Bot) -> None:
    DB = DataBaseCommand
    users_opinion_tuple = await DB.get_user_setting(message.from_user.id)
    # UA: –ü—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –Ω–æ–≤–∏—Ö –≤–∞–ª—é—Ç, —Å—é–¥–∏ –¥–æ–¥–∞—Ç–∏ —ó—ó –Ω–∞–∑–≤—É
    # EN: When adding new currencies, add its name here
    if message.text == 'EUR': # –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –Ω–æ–≤–∏—Ö –≤–∞–ª—é—Ç —Å—é–¥–∏ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ –≤–∞—Ä–Ü–∞–Ω—Ç–∏
        PIM = Printing_Information_in_Message(users_opinion_tuple, 'EUR')
        currency = '–µ–≤—Ä–æ  üá™üá∫'
    elif message.text == 'USD':
        PIM = Printing_Information_in_Message(users_opinion_tuple, 'USD')
        currency = '–¥–æ–ª–∞—Ä—ñ–≤  üá∫üá∏'
    elif message.text == 'PLN':
        PIM = Printing_Information_in_Message(users_opinion_tuple, 'PLN')
        currency = '–∑–ª–æ—Ç–∏—Ö  üáµüá±'
    
    value_list = PIM.print_rate()
    value_list_sell = sorted(value_list, key=lambda x: x[1])
    await message.answer(f'''–¢–æ–ø 5 –±–∞–Ω–∫—ñ–≤ –∑–∞ –∫—É—Ä—Å–æ–º –ø—Ä–æ–¥–∞–∂ {currency}:
            1. {value_list_sell[0][0]} - <b>{value_list_sell[0][1]}</b> –≥—Ä–Ω.
            2. {value_list_sell[1][0]} - <b>{value_list_sell[1][1]}</b> –≥—Ä–Ω.
            3. {value_list_sell[2][0]} - <b>{value_list_sell[2][1]}</b> –≥—Ä–Ω.
            4. {value_list_sell[3][0]} - <b>{value_list_sell[3][1]}</b> –≥—Ä–Ω.
            5. {value_list_sell[4][0]} - <b>{value_list_sell[4][1]}</b> –≥—Ä–Ω.
            ''')

    value_list_buy = sorted(value_list, key=lambda x: x[2], reverse=True)
    await message.answer(f'''–¢–æ–ø 5 –±–∞–Ω–∫—ñ–≤ –∑–∞ –∫—É—Ä—Å–æ–º –∫—É–ø—ñ–≤–ª—ñ {currency}:
            1. {value_list_buy[0][0]} - <b>{value_list_buy[0][2]}</b> –≥—Ä–Ω.
            2. {value_list_buy[1][0]} - <b>{value_list_buy[1][2]}</b> –≥—Ä–Ω.
            3. {value_list_buy[2][0]} - <b>{value_list_buy[2][2]}</b> –≥—Ä–Ω.
            4. {value_list_buy[3][0]} - <b>{value_list_buy[3][2]}</b> –≥—Ä–Ω.
            5. {value_list_buy[4][0]} - <b>{value_list_buy[4][2]}</b> –≥—Ä–Ω.
             ''')


# @dp.message(F.text == '/change')
async def change_option_bank(message:Message, bot: Bot) -> None:
    await message.answer(text='–í–∏–±–µ—Ä–∏—Ç—å —Å–ø–æ—Å—ñ–± –æ–±–º—ñ–Ω—É', reply_markup=star_keyboard())



# @dp.message(F.text == '/start')
async def send_welcome(message: Message) -> None:
    await DataBaseCommand.reg_new_user(
        message.from_user.first_name,
        message.from_user.last_name,
        message.from_user.id)
    await message.answer(
        f'–ü—Ä–∏–≤—ñ—Ç {message.from_user.first_name},\
            –≤–∏–±–µ—Ä–∏ —è–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º —Ç–∏ —Ö–æ—á–µ—à –æ–±–º—ñ–Ω—è—Ç–∏ –≤–∞–ª—é—Ç—É',
                         reply_markup= star_keyboard())
    logging.debug(
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} {message.from_user.last_name}\
            –≤–∏–∫–æ–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É ['help', 'start']")


# @dp.callback_query(F.data.in_({'cashdesk', 'card', 'main'}))
async def callback_bank_opinion(callback: CallbackQuery, bot: Bot) -> None:
    DB = DataBaseCommand
    if callback.data == 'cashdesk':
        await DB.add_bank_options('cashdesk', callback.from_user.id)
        await callback.message.answer('–í–∏–±—Ä–∞–Ω–æ –æ–±–º—ñ–Ω —É –∫–∞—Å—Å—ñ',\
                                    reply_markup= bank_opinion())
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await callback.answer(text='–í–∞—à—ñ –¥–∞–Ω—ñ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î')
        await callback.answer()
    elif callback.data == 'card':
        await DB.add_bank_options('card', callback.from_user.id)
        await callback.message.answer('–í–∏–±—Ä–∞–Ω–æ –æ–±–º—ñ–Ω –∫–∞—Ä—Ç–∫–æ—é',
                                       reply_markup=bank_opinion())
        await callback.answer(text='–í–∞—à—ñ –¥–∞–Ω—ñ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î')
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await callback.answer()


async def show_bank_opinion(message:Message):
    DB = DataBaseCommand
    opinion = await DB.get_user_setting(message.from_user.id)
    if opinion == 'card':
        await message.answer(text='–í–∏–±—Ä–∞–Ω–æ –æ–±–º—ñ–Ω –ø—Ä–∏ –æ–ø–ª–∞—Ç—ñ –∫–∞—Ä—Ç–∫–æ—é')
    elif opinion == 'cashdesk':
        await message.answer(text='–í–∏–±—Ä–∞–Ω–æ –æ–±–º—ñ–Ω —É –∫–∞—Å–∞—Ö –±–∞–Ω–∫—É')
